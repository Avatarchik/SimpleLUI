//
// SimpleLUI Source
//
// Copyright (c) 2019 ADAM MAJCHEREK ALL RIGHTS RESERVED
//

using System;
using System.Collections.Generic;
using System.IO;
using UnityEngine;

namespace SimpleLUI.Editor
{
    internal static class SLUIEngineToScriptConverter
    {
        internal static void Convert(Canvas c, string f, bool prettyPrint)
        {
            // clear cache
            varCache.Clear();

            var dir = Path.GetDirectoryName(f);
            var res = $"{dir}\\auto_res";
            res = res.Remove(0, Environment.CurrentDirectory.Length + 1);

            if (Directory.Exists(res))
            {
                Directory.Delete(res, true);
            }

            Directory.CreateDirectory(res);

            var builder = new SLUILuaBuilder(prettyPrint, res);

            // write allowed namespaces
            foreach (var lib in SLUIManager.AllowedNamespaces)
            {
                builder.Import(lib.Key, lib.Value);
            }

            builder.Space();
            builder.String.AppendLine("-- Auto Generated by SLUI 'Unity's UI to Lua Converter'");
            builder.String.AppendLine($"-- Time {DateTime.Now:G}");

            // collect supported components
            var allComponents = c.GetComponentsInChildren<Component>(true);
            var supportedComponents = new List<Component>();
            foreach (var d in allComponents)
            {
                if (d.transform.parent == null)
                    continue; // ignore root canvas

                if (builder.CheckForSupport(d.GetType()))
                    supportedComponents.Add(d);
                else
                {
                    Debug.LogWarning($"Type {d.GetType()} is not supported by the {nameof(SLUILuaBuilder)} and will be ignored!", d);
                }
            }

            // write all objects
            builder.Space("![Definition]");
            foreach (var d in supportedComponents)
            {
                builder.AppendDefinition(d);
            }

            builder.Space("![DefinitionExtras]");
            foreach (var d in supportedComponents)
            {
                builder.AppendDefinitionExtras(d);
            }

            builder.Space("![Property]");
            foreach (var d in supportedComponents)
            {
                builder.AppendProperty(d);
            }

            builder.Space("![Extras]");
            foreach (var d in supportedComponents)
            {
                builder.AppendExtras(d);
            }

            // save the file
            File.WriteAllText(f, builder.ToString());
        }

        private static void CheckAndAddVar(string var, UnityEngine.Object o)
        {
            if (varCache.Contains(var))
            {
                throw new InvalidOperationException($"var of name {var} already exists. Please, rename {o.name}.");
            }

            varCache.Add(var);
        }

        private static List<string> varCache { get; } = new List<string>();
    }
}
