//
// SimpleLUI Source
//
// Copyright (c) 2019 ADAM MAJCHEREK ALL RIGHTS RESERVED
//

using System;
using System.Collections.Generic;
using System.IO;
using UnityEngine;
using UnityEngine.UI;

namespace SimpleLUI.Editor
{
    internal static class SLUIEngineToScriptConverter
    {
        internal static void Convert(Canvas c, string f)
        {
            // clear cache
            varCache.Clear();

            var dir = Path.GetDirectoryName(f);
            var res = $"{dir}\\auto_res";
            res = res.Remove(0, Environment.CurrentDirectory.Length + 1);

            if (Directory.Exists(res))
            {
                Directory.Delete(res, true);
            }

            Directory.CreateDirectory(res);

            var builder = new SLUILuaBuilder();

            // write allowed namespaces
            foreach (var lib in SLUIManager.AllowedNamespaces)
            {
                builder.Import(lib.Key, lib.Value);
            }

            builder.String.AppendLine($"-- Auto Generated by SLUI 'Unity's UI to Lua Converter'");
            builder.String.AppendLine($"-- Time {DateTime.Now:G}");

            builder.Space("objects");
            // write all objects
            var allRects = c.GetComponentsInChildren<RectTransform>(true);
            foreach (var r in allRects)
            {
                if (r.parent == null)
                    continue; // ignore root

                var newVar = builder.GameObjectFromRect(r);
                CheckAndAddVar(newVar, r);
            }

            builder.Space("parents");
            // parent objects
            foreach (var r in allRects)
            {
                if (r.parent == null || r.parent.parent == null)
                    continue; // ignore root!

                builder.Parent(r, (RectTransform) r.parent);
            }

            builder.Space("anchors");
            // apply objects anchor
            foreach (var r in allRects)
            {
                if (r.parent == null)
                    continue;

                builder.Anchor(r);
            }

            builder.Space("transforms");
            // apply objects size
            foreach (var r in allRects)
            {
                if (r.parent == null)
                    continue;

                builder.Space($"{r.name}");
                builder.Transform(r);
            }

            builder.Space("images");
            // apply images
            foreach (var r in allRects)
            {
                if (r.parent == null)
                    continue;

                var i = r.GetComponent<Image>();
                if (i == null)
                    continue;

                string sprite = null;
                if (i.sprite != null)
                {
                    sprite = SLUIResourcesConverter.CollectResourceName(i.sprite);
                    SLUIResourcesConverter.WriteSprite($"{res}\\{sprite}", i.sprite);
                }

                builder.Space($"{r.name}");
                var newVar = builder.Image(i, $"{res.Replace("\\", "//")}//{sprite}");
                CheckAndAddVar(newVar, i);
            }

            // save the file
            File.WriteAllText(f, builder.ToString());
        }

        private static void CheckAndAddVar(string var, UnityEngine.Object o)
        {
            if (varCache.Contains(var))
            {
                throw new InvalidOperationException($"var of name {var} already exists. Please, rename {o.name}.");
            }

            varCache.Add(var);
        }

        private static List<string> varCache { get; } = new List<string>();
    }
}
