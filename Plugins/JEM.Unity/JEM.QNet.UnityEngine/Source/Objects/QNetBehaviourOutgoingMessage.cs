//
// QNet For Unity Source
//
// Copyright (c) 2019 ADAM MAJCHEREK ALL RIGHTS RESERVED
//

using JEM.QNet.Messages;
using JetBrains.Annotations;
using System;
using System.ComponentModel;

namespace JEM.QNet.UnityEngine.Objects
{
    /// <summary>
    ///     A outgoing message instance of <see cref="QNetBehaviour"/>.
    /// </summary>
    public class QNetBehaviourOutgoingMessage
    {
        /// <summary>
        ///     Reference to the parent <see cref="QNetBehaviour"/> of this outgoing message.
        /// </summary>
        public QNetBehaviour Parent { get; }

        /// <summary>
        ///     Defines whether this outgoing message has been generated by server or client peer.
        /// </summary>
        public bool IsServerMessage { get; }

        /// <summary>
        ///     A message pointer of this outgoing message.
        /// </summary>
        public QNetBehaviour.QNetMessagePointer MessagePointer { get; }

        /// <summary>
        ///     A <see cref="QNetMessageWriter"/> you can write data that will be send.
        /// </summary>
        public QNetMessageWriter Writer { get; }

        internal QNetBehaviourOutgoingMessage([NotNull] QNetBehaviour parent, bool isServerMessage, [NotNull] QNetBehaviour.QNetMessagePointer messagePointer,
            [NotNull] QNetMessageWriter writer)
        {
            if (parent == null) throw new ArgumentNullException(nameof(parent));
            if (messagePointer == null) throw new ArgumentNullException(nameof(messagePointer));
            if (writer == null) throw new ArgumentNullException(nameof(writer));

            Parent = parent;
            IsServerMessage = isServerMessage;
            MessagePointer = messagePointer;
            Writer = writer;
        }

        /// <summary>
        ///     Sends a client message to the server the client is connected with.
        /// </summary>
        /// <remarks>
        ///     Only as owner of the object you can send behaviour's network methods!
        /// </remarks>
        /// <exception cref="ArgumentNullException"/>
        /// <exception cref="InvalidEnumArgumentException"/>
        public void SendMessage() => 
            SendMessage(MessagePointer.Attribute.Channel, MessagePointer.Attribute.Method);

        /// <summary>
        ///     Sends a client message to the server the client is connected with.
        /// </summary>
        /// <remarks>
        ///     Only as owner of the object you can send behaviour's network methods!
        /// </remarks>
        /// <exception cref="ArgumentNullException"/>
        /// <exception cref="InvalidEnumArgumentException"/>
        public void SendMessage([NotNull] Enum channel, QNetMessageMethod method)
        {
            if (channel == null) throw new ArgumentNullException(nameof(channel));
            if (!Enum.IsDefined(typeof(QNetMessageMethod), method))
                throw new InvalidEnumArgumentException(nameof(method), (int)method, typeof(QNetMessageMethod));
            if (IsServerMessage)
                throw new InvalidOperationException("You are trying to send server QNetBehaviour message using SendMessage method.");

            // Send to all.
            // NOTE. as QNetManager.SentToAll ignores hostConnection we need to call this the default way.
            QNetManager.Send(channel, method, Writer);
        }

        /// <summary>
        ///     Sends a server message to the given connection.
        /// </summary>
        /// <exception cref="ArgumentNullException"/>
        /// <exception cref="InvalidEnumArgumentException"/>
        public void SendMessage(QNetConnection connection) =>
            SendMessage(connection, MessagePointer.Attribute.Channel, MessagePointer.Attribute.Method);

        /// <summary>
        ///     Sends a server message to the given connection.
        /// </summary>
        /// <exception cref="ArgumentNullException"/>
        /// <exception cref="InvalidEnumArgumentException"/>
        public void SendMessage(QNetConnection connection, [NotNull] Enum channel, QNetMessageMethod method)
        {
            if (channel == null) throw new ArgumentNullException(nameof(channel));
            if (!Enum.IsDefined(typeof(QNetMessageMethod), method))
                throw new InvalidEnumArgumentException(nameof(method), (int)method, typeof(QNetMessageMethod));
            if (!IsServerMessage)
                throw new InvalidOperationException("You are trying to send non server QNetBehaviour message using SendMessage(QNetConnection) method.");

            if (connection.Equals(default(QNetConnection)))
                throw new NullReferenceException("Failed to send network message. " +
                                                 "Target connection is equal default.");

            // Send to all.
            // NOTE. as QNetManager.SentToAll ignores hostConnection we need to call this the default way.
            QNetManager.Send(connection, channel, method, Writer);
        }

        /// <summary>
        ///     Sends a server message to all connected players.
        /// </summary>
        /// <exception cref="ArgumentNullException"/>
        /// <exception cref="InvalidEnumArgumentException"/>
        public void SendMessageToAll() =>
            SendMessageToAll(MessagePointer.Attribute.Channel, MessagePointer.Attribute.Method);

        /// <summary>
        ///     Sends a server message to all connected players.
        /// </summary>
        /// <exception cref="ArgumentNullException"/>
        /// <exception cref="InvalidEnumArgumentException"/>
        public void SendMessageToAll([NotNull] Enum channel, QNetMessageMethod method)
        {
            if (channel == null) throw new ArgumentNullException(nameof(channel));
            if (!Enum.IsDefined(typeof(QNetMessageMethod), method))
                throw new InvalidEnumArgumentException(nameof(method), (int)method, typeof(QNetMessageMethod));
            if (!IsServerMessage)
                throw new InvalidOperationException("You are trying to send non server QNetBehaviour message using SendMessageToAll method.");

            // Send to all.
            // NOTE. as QNetManager.SentToAll ignores hostConnection we need to call this the default way.
            QNetManager.Instance.Server.SendToAll(channel, method, Writer);
        }
    }
}
